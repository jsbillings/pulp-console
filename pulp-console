#!/usr/bin/python -Ott
""" Python client API console for Pulp

pulp-console is an interactive Python shell for the Pulp client APIs.
It uses IPython if installed, or the default Python shell if not.  It
will attempt to use an existing stored Pulp authentication certificate
if one exists; if not, it will attempt to read the Pulp admin username
and password from /etc/pulp/pulp.conf and log in using that.

Once the console is started, you have an active Pulp login, and the
following variables defined:

* repoapi: A pulp.client.api.repository.RepositoryAPI instance
* userapi: A pulp.client.api.user.UserAPI instance
* taskapi: A pulp.client.api.task.TaskAPI instance
* serviceapi: A pulp.client.api.service.ServiceAPI instance
* filterapi: A pulp.client.api.filter.FilterAPI instance
* server: A pulp.client.api.server.Server instance, the same as pulp.client.api.server.active_server

It differs from pic.py in that pic.py is a console for the REST APIs,
not the Python client APIs. """

import sys
from pulp.client.admin.credentials import Login as LoginBundle
from pulp.client.api.repository import RepositoryAPI
from pulp.client.api.user import UserAPI
from pulp.client.api.task import TaskAPI
from pulp.client.api.filter import FilterAPI
from pulp.client.api.service import ServiceAPI
from pulp.common.dateutils import format_iso8601_datetime, \
     format_iso8601_interval
from pulp.client.api import server as ServerAPI
from pulp.client.consumer.config import ConsumerConfig
from pulp.client.lib.utils import parse_interval_schedule
from code import InteractiveConsole
from optparse import OptionParser

try:
    import pulp.server.config as ServerConfig
    has_admin = True
except RuntimeError:
    has_admin = False

def load_interpreters():
    interpreters = dict(python=lambda v: InteractiveConsole(v).interact())
    best = "python"
    try:
        import bpython.cli
        interpreters["bpython"] = lambda v: bpython.cli.main(args=[], locals_=v)
        best = "bpython"
    except ImportError:
        pass
            
    try:
        # whether ipython is actually better than bpython is
        # up for debate, but this is the behavior that existed
        # before --interpreter was added, so we call IPython
        # better
        import IPython
        if hasattr(IPython, "Shell"):
            interpreters["ipython"] = lambda v: \
                IPython.Shell.IPShell(argv=[], user_ns=v).mainloop()
            best = "ipython"
        elif hasattr(IPython, "embed"):
            interpreters["ipython"] = lambda v: IPython.embed(user_ns=v)
            best = "ipython"
        else:
            print("Unknown IPython API version")
    except ImportError:
        pass

    interpreters['best'] = interpreters[best]
    return interpreters

def pulp_user_login():
    """ attempt to login with the cert that already exists for the user """
    lbundle = LoginBundle()
    repoapi = RepositoryAPI()
    print("Trying login with %s" % lbundle.crtpath())
    try:
        ServerAPI.active_server.set_ssl_credentials(lbundle.crtpath())

        # setting creds doesn't raise an error if the creds are
        # invalid; we have to actually try to perform an operation
        # before we know our 'login' was successful
        repoapi.repositories(dict())
        return True
    except (ServerAPI.ServerRequestError, RuntimeError), err:
        print(err)
        return False

def pulp_admin_login():
    """ try to login with the default login information in pulp.conf """
    if not has_admin:
        return False
    userapi = UserAPI()
    lbundle = LoginBundle()
    cfg = ServerConfig.config

    print("Trying login as %s" % cfg.get("server", "default_login"))
    try:
        ServerAPI.active_server.set_basic_auth_credentials(cfg.get("server",
                                                                "default_login"),
                                                           cfg.get("server",
                                                                   "default_password"))
        crt = userapi.admin_certificate()
        print("Storing auth certificate at %s" % lbundle.crtpath())
        lbundle.write(crt)
        return True
    except ServerAPI.ServerRequestError, err:
        print(err)
        return False

def setup_pulp():
    """ instantiate pulp server object and log in """
    config = ConsumerConfig()
    serveropts = config.server
    print("Connecting to Pulp server at %s://%s:%s%s" % (serveropts['scheme'],
                                                         serveropts['host'],
                                                         serveropts['port'],
                                                         serveropts['path']))
    pulpserver = ServerAPI.PulpServer(serveropts['host'],
                                      int(serveropts['port']),
                                      serveropts['scheme'],
                                      serveropts['path'])
    ServerAPI.set_active_server(pulpserver)

    if not pulp_user_login() and not pulp_admin_login():
        print("Could not authenticate to Pulp; run 'pulp-admin auth login'")
        raise SystemExit(1)

def main():
    interpreters = load_interpreters()

    parser = OptionParser()
    parser.add_option("-i", "--interpreter",
                      help="Use the specified interpreter",
                      action="store", default="best",
                      choices=interpreters.keys())
    (options, args) = parser.parse_args()

    setup_pulp()
    repoapi = RepositoryAPI()
    userapi = UserAPI()
    taskapi = TaskAPI()
    serviceapi = ServiceAPI()
    filterapi = FilterAPI()
    server = ServerAPI.active_server
    return interpreters[options.interpreter](locals())

if __name__ == "__main__":
    sys.exit(main())
